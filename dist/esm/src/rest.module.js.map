{"version":3,"file":"rest.module.js","sourceRoot":"","sources":["../../../src/rest.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule} from '@angular/core';\n// import {HttpModule} from '@angular/http';\n// import {RESTClient} from './rest.service';\nimport {\n  HttpModule,\n  Http,\n  Headers as AngularHeaders,\n  Request,\n  RequestOptions,\n  RequestMethod as RequestMethods,\n  Response,\n  URLSearchParams\n} from '@angular/http';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/**\n* Angular 2 RESTClient class.\n*\n* @class RESTClient\n* @constructor\n*/\n\nexport class RESTClient {\n\n    public constructor( protected http: Http) {\n    }\n\n    protected getBaseUrl(): string {\n        return null;\n    };\n\n    protected getDefaultHeaders(): Object {\n        return null;\n    };\n\n    /**\n    * Request Interceptor\n    *\n    * @method requestInterceptor\n    * @param {Request} req - request object\n    */\n    protected requestInterceptor(req: Request) {\n      //\n    }\n\n    /**\n    * Response Interceptor\n    *\n    * @method responseInterceptor\n    * @param {Response} res - response object\n    * @returns {Response} res - transformed response object\n    */\n    protected responseInterceptor(res: Observable<Response>): Observable<Response> {\n        return res;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, decorators: [{ type: Inject, args: [Http, ] }, ]},\n];\n}\n\n/**\n * Set the base URL of REST resource\n * @param {String} url - base URL\n */\nexport function BaseUrl(url: string) {\n    return function <TFunction extends Function>(Target: TFunction): TFunction {\n        Target.prototype.getBaseUrl = function() {\n            return url;\n        };\n        return Target;\n    };\n}\n\n/**\n * Set default headers for every method of the RESTClient\n * @param {Object} headers - deafult headers in a key-value pair\n */\nexport function DefaultHeaders(headers: any) {\n    return function <TFunction extends Function>(Target: TFunction): TFunction {\n        Target.prototype.getDefaultHeaders = function() {\n            return headers;\n        };\n        return Target;\n    };\n}\n\n\n\n\nfunction paramBuilder(paramName: string) {\n    return function(key: string) {\n        return function(target: RESTClient, propertyKey: string | symbol, parameterIndex: number) {\n            var metadataKey = `${propertyKey}_${paramName}_parameters`;\n            var paramObj: any = {\n                key: key,\n                parameterIndex: parameterIndex\n            };\n            if (Array.isArray(target[metadataKey])) {\n                target[metadataKey].push(paramObj);\n            } else {\n                target[metadataKey] = [paramObj];\n            }\n        };\n    };\n}\n\n/**\n * Path variable of a method's url, type: string\n * @param {string} key - path key to bind value\n */\nexport var Path = paramBuilder('Path');\n/**\n * Query value of a method's url, type: string\n * @param {string} key - query key to bind value\n */\nexport var Query = paramBuilder('Query');\n/**\n * Body of a REST method, type: key-value pair object\n * Only one body per method!\n */\nexport var Body = paramBuilder('Body')('Body');\n/**\n * Custom header of a REST method, type: string\n * @param {string} key - header key to bind value\n */\nexport var Header = paramBuilder('Header');\n\n\n/**\n * Set custom headers for a REST method\n * @param {Object} headersDef - custom headers in a key-value pair\n */\nexport function Headers(headersDef: any) {\n    return function(target: RESTClient, propertyKey: string, descriptor: any) {\n        descriptor.headers = headersDef;\n        return descriptor;\n    };\n}\n\n\n/**\n * Defines the media type(s) that the methods can produce\n * @param MediaType producesDef - mediaType to be parsed\n */\nexport function Produces<T>(producer: (res: Response) => T) {\n    return function(target: RESTClient, propertyKey: string, descriptor: any) {\n        descriptor.producer = producer\n        return descriptor;\n    };\n}\n\n\n/**\n * Supported @Produces media types\n */\nexport enum MediaType {\n    JSON\n}\n\n\nfunction methodBuilder(method: number) {\n  return function(url: string) {\n    return function(target: RESTClient, propertyKey: string, descriptor: any) {\n\n      var pPath = target[`${propertyKey}_Path_parameters`];\n      var pQuery = target[`${propertyKey}_Query_parameters`];\n      var pBody = target[`${propertyKey}_Body_parameters`];\n      var pHeader = target[`${propertyKey}_Header_parameters`];\n\n      descriptor.value = function(...args: any[]) {\n\n        // Body\n        var body = null;\n        if (pBody) {\n          body = JSON.stringify(args[pBody[0].parameterIndex]);\n        }\n\n        // Path\n        var resUrl: string = url;\n        if (pPath) {\n          for (var k in pPath) {\n            if (pPath.hasOwnProperty(k)) {\n              resUrl = resUrl.replace('{' + pPath[k].key + '}', args[pPath[k].parameterIndex]);\n            }\n          }\n        }\n\n        // Query\n        var search = new URLSearchParams();\n        if (pQuery) {\n          pQuery\n          .filter(p => args[p.parameterIndex]) // filter out optional parameters\n          .forEach(p => {\n            var key = p.key;\n            var value = args[p.parameterIndex];\n            // if the value is a instance of Object, we stringify it\n            if (value instanceof Object) {\n              value = JSON.stringify(value);\n            }\n            search.set(encodeURIComponent(key), encodeURIComponent(value));\n          });\n        }\n\n        // Headers\n        // set class default headers\n        var headers = new AngularHeaders(this.getDefaultHeaders());\n        // set method specific headers\n        for (var k in descriptor.headers) {\n            if (descriptor.headers.hasOwnProperty(k)) {\n                headers.append(k, descriptor.headers[k]);\n            }\n        }\n        // set parameter specific headers\n        if (pHeader) {\n          for (var k in pHeader) {\n            if (pHeader.hasOwnProperty(k)) {\n              headers.append(pHeader[k].key, args[pHeader[k].parameterIndex]);\n            }\n          }\n        }\n\n        // Request options\n        var options = new RequestOptions({\n          method,\n          url: this.getBaseUrl() + resUrl,\n          headers,\n          body,\n          search\n        });\n\n        var req = new Request(options);\n\n        // intercept the request\n        this.requestInterceptor(req);\n        // make the request and store the observable for later transformation\n        var observable: Observable<any> = this.http.request(req);\n\n        // intercept the response\n        observable = this.responseInterceptor(observable);\n\n        // transform the obserable in accordance to the @Produces decorator\n        if (descriptor.producer) {\n          observable = observable.map(descriptor.producer);\n        }\n\n        return observable;\n      };\n\n      return descriptor;\n    };\n  };\n}\n\n/**\n * GET method\n * @param {string} url - resource url of the method\n */\nexport var GET = methodBuilder(RequestMethods.Get);\n/**\n * POST method\n * @param {string} url - resource url of the method\n */\nexport var POST = methodBuilder(RequestMethods.Post);\n/**\n * PUT method\n * @param {string} url - resource url of the method\n */\nexport var PUT = methodBuilder(RequestMethods.Put);\n/**\n * DELETE method\n * @param {string} url - resource url of the method\n */\nexport var DELETE = methodBuilder(RequestMethods.Delete);\n/**\n * HEAD method\n * @param {string} url - resource url of the method\n */\nexport var HEAD = methodBuilder(RequestMethods.Head);\n\n\n\nexport class RESTModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [],\n  imports: [HttpModule],\n  exports: [HttpModule],\n  providers: [RESTClient]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}